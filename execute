#!/bin/bash

# Project directory
PROJECT_ROOT="$(pwd)"

# Function to detect the operating system
detect_os() {
    case "$OSTYPE" in
        linux-gnu*)
            OS="Linux"
            ;;
        darwin*)
            OS="macOS"
            ;;
        cygwin*|msys*|win32)
            OS="Windows"
            ;;
        *)
            echo "Unsupported OS: $OSTYPE"
            exit 1
            ;;
    esac
}

# Function to set script extension based on the OS
set_script_extension() {
    if [[ "$OS" == "Windows" ]]; then
        EXT=".bat"
    else
        EXT=".sh"
    fi
}

# Functions to run specific scripts
run_clean() {
    "$CMD_DIR/run_flutter_clean$EXT"
}

run_get() {
    "$CMD_DIR/run_flutter_pub_get$EXT"
}

run_clean_get() {
    run_clean
    run_get
}

run_generate_build() {
    "$CMD_DIR/run_build_runner_build$EXT" "$2"
}

run_generate_clean() {
    "$CMD_DIR/run_build_runner_clean$EXT"
}

run_generate_localization() {
    "$CMD_DIR/run_flutter_localization$EXT"
}

# Main function to handle commands
main() {
    detect_os
    set_script_extension

    # Directory containing the command scripts for the detected OS
    CMD_DIR="$(dirname "${BASH_SOURCE[0]}")/cmd/$OS"
    INFO_DIR="$(dirname "${BASH_SOURCE[0]}")/cmd/Info"

    # Check if no arguments are provided
    if [ $# -eq 0 ]; then
        echo "No command provided. Use -h or -help for usage information."
        exit 1
    fi

    # Handle the provided command
    case "$1" in
        -h | -help)
            source "$INFO_DIR/show_help.sh"
            show_help
            ;;
        pub:clean)
            run_clean
            ;;
        pub:get)
            run_get
            ;;
        pub:clean-get)
            run_clean_get
            ;;
        generate:build)
            run_generate_build "$@"
            ;;
        generate:clean)
            run_generate_clean
            ;;
        generate:localization)
            run_generate_localization
            ;;
        *)
            echo "Unknown command: $1"
            echo "Use -h or -help for usage information."
            exit 1
            ;;
    esac
}

# Execute the main function with all passed arguments
main "$@"

